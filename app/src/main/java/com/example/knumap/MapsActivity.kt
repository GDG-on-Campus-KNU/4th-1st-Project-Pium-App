package com.example.knumap

import android.content.pm.PackageManager
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.SupportMapFragment
import com.google.android.gms.maps.model.BitmapDescriptorFactory
import com.google.android.gms.maps.model.GroundOverlayOptions
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.maps.model.LatLngBounds
import com.google.android.gms.maps.model.Marker
import com.google.android.gms.maps.model.MarkerOptions
import android.Manifest
import android.animation.ValueAnimator
import android.annotation.SuppressLint
import android.content.Context
import android.content.Intent
import android.content.res.Resources
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.location.Location
import android.net.Uri
import android.os.Build
import android.os.Environment
import android.provider.MediaStore
import android.util.Log
import android.view.MotionEvent
import android.view.View
import android.view.animation.DecelerateInterpolator
import android.widget.Button
import android.widget.ImageButton
import android.widget.TextView
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.core.app.ActivityCompat.startActivityForResult
import androidx.core.content.FileProvider
import androidx.core.view.ViewCompat
import androidx.core.widget.NestedScrollView
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.knumap.model.Post
import com.example.knumap.network.RetrofitClient
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import com.google.android.gms.location.LocationCallback
import com.google.android.gms.location.LocationResult
import com.google.android.gms.maps.model.GroundOverlay
import com.google.android.gms.maps.model.MapStyleOptions
import com.google.android.gms.maps.model.Polygon
import com.google.android.gms.maps.model.PolygonOptions
import com.google.android.gms.location.LocationRequest
import com.google.android.gms.location.Priority
import com.google.android.material.bottomsheet.BottomSheetBehavior
import kotlinx.coroutines.launch
import java.io.File
import java.io.FileOutputStream
import java.io.IOException

import java.security.MessageDigest


class MapsActivity : AppCompatActivity(), OnMapReadyCallback {

    private lateinit var mMap: GoogleMap
    private lateinit var fusedLocationClient: FusedLocationProviderClient
    private var userMarker: Marker? = null // ÏÇ¨Ïö©Ïûê ÏúÑÏπò ÎßàÏª§
    private val LOCATION_PERMISSION_REQUEST_CODE = 1
    private val CAMERA_PERMISSION_REQUEST_CODE = 1001
    private val STORAGE_PERMISSION_REQUEST_CODE = 1002
    private lateinit var locationCallback: LocationCallback
    private val buildingOverlays = mutableMapOf<String, Pair<GroundOverlay?, LatLngBounds>>()
    private lateinit var bottomSheet: NestedScrollView
    private lateinit var dragHandle: View
    private var isExpanded = false
    private lateinit var myLocationButton: ImageButton
    private lateinit var zoomInButton: ImageButton
    private lateinit var zoomOutButton: ImageButton
    private var initialY = 0f
    private var touchStartY = 0f
    private val expandedHeight = 1500f // ÌôïÏû•Îêú ÎÜíÏù¥
    private val collapsedHeight = 300f // Ï†ëÌûå ÎÜíÏù¥
    private var isDragging = false
    private lateinit var photoAdapter: PhotoAdapter
    private val photoList = mutableListOf<Uri>()
    private val REQUEST_IMAGE_CAPTURE = 1
    private val REQUEST_WRITE_POST = 2
    private val REQUEST_VIEW_POST = 3
    private lateinit var photoUri: Uri
    private lateinit var photoFile: File
    private lateinit var bottomSheetBehavior: BottomSheetBehavior<ConstraintLayout>

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_maps)
        // 1. SharedPreferencesÏóêÏÑú access_token Í∫ºÎÇ¥Í∏∞
        val prefs = getSharedPreferences("auth", Context.MODE_PRIVATE)
        val jwtAccessToken = prefs.getString("access_token", null)

        if (jwtAccessToken.isNullOrBlank()) {
            Toast.makeText(this, "JWT ÌÜ†ÌÅ∞ ÏóÜÏùå", Toast.LENGTH_SHORT).show()
            return
        }

        // 2. ÏÑúÎ≤ÑÏóê ÌÖåÏä§Ìä∏ ÏöîÏ≤≠ Î≥¥ÎÇ¥Í∏∞
        lifecycleScope.launch {
            try {
                val response = RetrofitClient.authService.getTestMessage("Bearer $jwtAccessToken")
                if (response.isSuccessful && response.body()?.success == true) {
                    val message = response.body()?.data?.message.orEmpty()
                    Toast.makeText(this@MapsActivity, "ÏÑúÎ≤Ñ ÏùëÎãµ: $message", Toast.LENGTH_LONG).show()
                    Log.d("TEST", "ÏÑúÎ≤Ñ Î©îÏãúÏßÄ: $message")
                } else {
                    Toast.makeText(this@MapsActivity, "ÏùëÎãµ Ïã§Ìå®: ${response.code()}", Toast.LENGTH_SHORT).show()
                    Log.e("TEST", "ÏùëÎãµ Ïã§Ìå®: ${response.code()}")
                }
            } catch (e: Exception) {
                Toast.makeText(this@MapsActivity, "Ïò§Î•ò: ${e.message}", Toast.LENGTH_SHORT).show()
                Log.e("TEST", "ÏóêÎü¨: ${e.message}")
            }
        }




        // SupportMapFragmentÎ•º ÎèôÏ†ÅÏúºÎ°ú Ï∂îÍ∞Ä
        val mapFragment = supportFragmentManager.findFragmentById(R.id.map_container) as? SupportMapFragment
            ?: SupportMapFragment.newInstance().also {
                supportFragmentManager.beginTransaction().replace(R.id.map_container, it).commit()
            }

        mapFragment.getMapAsync(this)

        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)

        myLocationButton = findViewById(R.id.myLocationButton)
        zoomInButton = findViewById(R.id.zoomInButton)
        zoomOutButton = findViewById(R.id.zoomOutButton)
        zoomInButton.setOnClickListener {
            mMap.animateCamera(CameraUpdateFactory.zoomIn())
        }
        zoomOutButton.setOnClickListener {
            mMap.animateCamera(CameraUpdateFactory.zoomOut())
        }


        myLocationButton.setOnClickListener {
            moveToCurrentLocation()
        }
        //
        checkAndRequestPermissions()
        findViewById<ImageButton>(R.id.cameraButton).setOnClickListener {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {
                // üîπ Ïπ¥Î©îÎùº Ïã§Ìñâ
                openCamera()
            } else {
                // üîπ Ïπ¥Î©îÎùº Í∂åÌïú ÏöîÏ≤≠
                ActivityCompat.requestPermissions(
                    this,
                    arrayOf(Manifest.permission.CAMERA),
                    CAMERA_PERMISSION_REQUEST_CODE
                )
            }
        }
        //


        // üî• Î∞îÌÖÄ ÏãúÌä∏ Ï¥àÍ∏∞Ìôî
        bottomSheet = findViewById(R.id.bottomSheetContainer)
        dragHandle = findViewById(R.id.dragHandle)

        dragHandle.setOnClickListener {
            toggleBottomSheet();

        }

        // üî• ÎìúÎûòÍ∑∏ Í∏∞Îä• Ï∂îÍ∞Ä
        bottomSheet.setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    initialY = bottomSheet.height.toFloat()
                    touchStartY = event.rawY
                    isDragging = true
                }

                MotionEvent.ACTION_MOVE -> {
                    val deltaY = (touchStartY - event.rawY).toInt()
                    val newHeight = (initialY + deltaY).coerceIn(collapsedHeight, expandedHeight)

                    bottomSheet.layoutParams.height = newHeight.toInt()
                    bottomSheet.requestLayout()
                }

                MotionEvent.ACTION_UP -> {
                    isDragging = false

                    val targetHeight = if (bottomSheet.height > (collapsedHeight + expandedHeight) / 2) {
                        expandedHeight
                    } else {
                        collapsedHeight
                    }

                    
                    // üî• ValueAnimator Ï†ÅÏö©Ìï¥ÏÑú Î∂ÄÎìúÎüΩÍ≤å Ïù¥Îèô
                    val animator = ValueAnimator.ofInt(bottomSheet.height, targetHeight.toInt())
                    animator.addUpdateListener { animation ->
                        val height = animation.animatedValue as Int
                        bottomSheet.layoutParams.height = height
                        bottomSheet.requestLayout()
                    }
                    animator.duration = 300
                    animator.start()
                }
            }
            true
        }

        findViewById<ImageButton>(R.id.sortLatestButton).setOnClickListener {
            photoAdapter.sortByLatest()
        }

        findViewById<ImageButton>(R.id.sortPopularButton).setOnClickListener {
            photoAdapter.sortByPopular()
        }


        // RecyclerView ÏÑ§Ï†ï
        photoAdapter = PhotoAdapter(mutableListOf()) { post ->
            val intent = Intent(this, PostDetailActivity::class.java).apply {
                putExtra("newPost", post)
            }
            startActivityForResult(intent, REQUEST_VIEW_POST)
        }
        //photoAdapter = PhotoAdapter(photoList)
        val photoRecyclerView = findViewById<RecyclerView>(R.id.photoRecyclerView)

        photoRecyclerView.apply {
            layoutManager = GridLayoutManager(this@MapsActivity, 3) // ‚úÖ 3Ïó¥ Í∑∏Î¶¨ÎìúÎ°ú ÏÑ§Ï†ï
            adapter = photoAdapter
            isNestedScrollingEnabled = true // ‚úÖ ÎÇ¥Î∂Ä Ïä§ÌÅ¨Î°§ ÌôúÏÑ±Ìôî
        }


        var recyclerStartY = 0f
        photoRecyclerView.setOnTouchListener { v, event ->
            v.parent.requestDisallowInterceptTouchEvent(true)
            false
        }
        /*
        // ‚úÖ RecyclerView ÌÑ∞Ïπò ÌïÑÌÑ∞: ÎØ∏ÏÑ∏ Ïä§ÌÅ¨Î°§ Î∞©ÏßÄ
        photoRecyclerView.setOnTouchListener { v, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    recyclerStartY = event.rawY
                }
                MotionEvent.ACTION_MOVE -> {
                    val delta = Math.abs(event.rawY - recyclerStartY)
                    if (delta < 20) {
                        return@setOnTouchListener true
                    }
                    v.parent.requestDisallowInterceptTouchEvent(true)
                }
                MotionEvent.ACTION_UP -> {
                    // ‚úÖ ÌÑ∞Ïπò Ìï¥Ï†ú Ïãú Î∂ÄÎ™®ÏóêÍ≤å Ïù¥Î≤§Ìä∏Î•º ÎÑòÍ∏∞ÏßÄ ÏïäÏùå (ÌäÄÎäî ÌòÑÏÉÅ Î∞©ÏßÄ)
                    v.parent.requestDisallowInterceptTouchEvent(true)
                }
            }
            false
        }

         */
        /*
        photoRecyclerView.addOnScrollListener(object : RecyclerView.OnScrollListener() {
            override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {
                super.onScrollStateChanged(recyclerView, newState)
                if (newState == RecyclerView.SCROLL_STATE_IDLE) {
                    recyclerView.parent.requestDisallowInterceptTouchEvent(false)
                }
            }
        })
        */




        // GPS ÏúÑÏπò Í∞ÄÏ†∏Ïò§Í∏∞ ÏúÑÌïú Ï¥àÍ∏∞Ìôî
        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)
    }

    private fun toggleBottomSheet() {
        val targetHeight = if (isExpanded) collapsedHeight else expandedHeight
        val targetButtonTranslation =  0f  // Î≤ÑÌäºÎèÑ Ìï®Íªò ÏúÑÎ°ú Ïù¥Îèô

        val animator = ValueAnimator.ofInt(bottomSheet.height, targetHeight.toInt())
        animator.addUpdateListener { animation ->
            val height = animation.animatedValue as Int
            bottomSheet.layoutParams.height = height
            bottomSheet.requestLayout()
        }

        // Î≤ÑÌäº Ïï†ÎãàÎ©îÏù¥ÏÖò (Î∞îÌÖÄ ÏãúÌä∏ÏôÄ Ìï®Íªò Ïù¥Îèô)
        myLocationButton.animate().translationY(targetButtonTranslation).setInterpolator(
            DecelerateInterpolator()
        ).start()
        zoomInButton.animate().translationY(targetButtonTranslation).setInterpolator(
            DecelerateInterpolator()
        ).start()
        zoomOutButton.animate().translationY(targetButtonTranslation).setInterpolator(
            DecelerateInterpolator()
        ).start()

        animator.duration = 300
        animator.start()

        isExpanded = !isExpanded
    }

    override fun onMapReady(googleMap: GoogleMap) {
        mMap = googleMap
        // 0.Ïä§ÌÉÄÏùº Ï†ÅÏö© (ÏßÄÎèÑ ÌÉÄÏùº Ïà®ÍπÄ)
        try {
            val success = googleMap.setMapStyle(
                MapStyleOptions.loadRawResourceStyle(this, R.raw.map_style)
            )
            if (!success) {
                Log.e("MapActivity", "Style parsing failed.")
            }
        } catch (e: Resources.NotFoundException) {
            Log.e("MapActivity", "Style file not found.", e)
        }

        // 1.Ïª§Ïä§ÌÖÄ Ïù¥ÎØ∏ÏßÄ ÏîåÏö∞Í∏∞
        // Í≤ΩÎ∂ÅÎåÄÌïôÍµê Ï§ëÏã¨ Ï¢åÌëú
        val knuCenter = LatLng(35.8886, 128.6105)

        // Ï¢åÏÉÅÎã®Í≥º Ïö∞ÌïòÎã® Ï¢åÌëú ÏÑ§Ï†ï
        val bounds = LatLngBounds.Builder()
            .include(LatLng(35.8965, 128.6030)) // Ï¢åÏÉÅÎã® GPS Ï¢åÌëú
            .include(LatLng(35.8840, 128.6176)) // Ïö∞ÌïòÎã® GPS Ï¢åÌëú
            .build()

        // GroundOverlay ÏÑ§Ï†ï
        val groundOverlayOptions = GroundOverlayOptions()
            .image(BitmapDescriptorFactory.fromResource(R.drawable.knu_map)) // Ïª§Ïä§ÌÖÄ ÏßÄÎèÑ Ïù¥ÎØ∏ÏßÄ
            .positionFromBounds(bounds) // LatLngBounds ÏÇ¨Ïö©
            .transparency(0.6f) // Ìà¨Î™ÖÎèÑ Ï°∞Ï†ï (0 = Î∂àÌà¨Î™Ö, 1 = ÏôÑÏ†Ñ Ìà¨Î™Ö)

        // GroundOverlay Ï∂îÍ∞Ä
        mMap.addGroundOverlay(groundOverlayOptions)

        // ÏßÄÎèÑ Ïù¥Îèô Î∞è Ï§å Î†àÎ≤® ÏÑ§Ï†ï
        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(knuCenter, 16f))

        //2. ÎÇ¥ ÏúÑÏπò Í∞ÄÏ†∏Ïò§Í∏∞
        enableMyLocation()
        //3. Í±¥Î¨º Ï∂îÍ∞ÄÌïòÍ∏∞
        addBuildingOverlays()

    }
    private fun addBuildingOverlays() {
        val libraryBounds = LatLngBounds.Builder()
            .include(LatLng(35.8889, 128.6112)) // Ï¢åÏÉÅÎã®
            .include(LatLng(35.8881, 128.6120)) // Ïö∞ÌïòÎã®
            .build()

        val dormBounds = LatLngBounds.Builder()
            .include(LatLng(35.8918, 128.6145))
            .include(LatLng(35.8910, 128.6155))
            .build()

        // ÎèÑÏÑúÍ¥Ä Ïò§Î≤ÑÎ†àÏù¥ Ï∂îÍ∞Ä
        val libraryOverlay = mMap.addGroundOverlay(
            GroundOverlayOptions()
                .image(BitmapDescriptorFactory.fromResource(R.drawable.knu_library))
                .positionFromBounds(libraryBounds)
                .transparency(0.0f)
        )

        buildingOverlays["library"] = Pair(libraryOverlay, libraryBounds)

        // Í∏∞ÏàôÏÇ¨ Ïò§Î≤ÑÎ†àÏù¥ Ï∂îÍ∞Ä
        val dormOverlay = mMap.addGroundOverlay(
            GroundOverlayOptions()
                .image(BitmapDescriptorFactory.fromResource(R.drawable.knu_dorm))
                .positionFromBounds(dormBounds)
                .transparency(0.0f)
        )
        buildingOverlays["dorm"] = Pair(dormOverlay, dormBounds)
        // Í±¥Î¨º ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ (ÌÑ∞Ïπò ÏúÑÏπò Í∞êÏßÄ)
        /*
        mMap.setOnMapClickListener { latLng ->
            if (libraryBounds.contains(latLng)) {
                showBuildingInfo("Ï§ëÏïôÎèÑÏÑúÍ¥Ä", "Ïù¥Í≥≥ÏùÄ Í≤ΩÎ∂ÅÎåÄ Ï§ëÏïôÎèÑÏÑúÍ¥ÄÏûÖÎãàÎã§.")
            }
            else if (dormBounds.contains(latLng)) {
                showBuildingInfo("Ï≤®ÏÑ±Í¥Ä", "Ïù¥Í≥≥ÏùÄ Í≤ΩÎ∂ÅÎåÄ Ï≤®ÏÑ±Í¥ÄÏûÖÎãàÎã§.")
            }
        }

        */

        // üî• Í±¥Î¨º Ï†ïÎ≥¥Î•º Ï†ÄÏû•ÌïòÎäî Map (Í±¥Î¨º Ïù¥Î¶Ñ ‚Üí (Í≤ΩÍ≥Ñ Ï†ïÎ≥¥, ÏÑ§Î™Ö))
        val buildingInfoMap = mapOf(
            "Ï§ëÏïôÎèÑÏÑúÍ¥Ä" to Pair(libraryBounds, "Ïù¥Í≥≥ÏùÄ Í≤ΩÎ∂ÅÎåÄ Ï§ëÏïôÎèÑÏÑúÍ¥ÄÏûÖÎãàÎã§."),
            "Ï≤®ÏÑ±Í¥Ä" to Pair(dormBounds, "Ïù¥Í≥≥ÏùÄ Í≤ΩÎ∂ÅÎåÄ Ï≤®ÏÑ±Í¥ÄÏûÖÎãàÎã§."),
            // üî• Ïó¨Í∏∞Ïóê ÏÉàÎ°úÏö¥ Í±¥Î¨ºÏùÑ ÏâΩÍ≤å Ï∂îÍ∞Ä Í∞ÄÎä•
            // "Í≥µÎåÄ1Ìò∏Í¥Ä" to Pair(engBuildingBounds, "Ïù¥Í≥≥ÏùÄ Í≤ΩÎ∂ÅÎåÄ Í≥µÎåÄ1Ìò∏Í¥ÄÏûÖÎãàÎã§."),
            // "ITÏúµÌï©Í¥Ä" to Pair(itBuildingBounds, "Ïù¥Í≥≥ÏùÄ Í≤ΩÎ∂ÅÎåÄ ITÏúµÌï©Í¥ÄÏûÖÎãàÎã§.")
        )

        mMap.setOnMapClickListener { latLng ->
            val foundBuilding = buildingInfoMap.entries.find { it.value.first.contains(latLng) }

            if (foundBuilding != null) {
                val (buildingName, buildingDescription) = foundBuilding.key to foundBuilding.value.second
                showBuildingInfo(buildingName, buildingDescription)
            } else {
                Log.d("MAP_DEBUG", "Ìï¥Îãπ ÏúÑÏπòÏóê Í±¥Î¨º Ï†ïÎ≥¥Í∞Ä ÏóÜÏùå")
            }
        }




    }
    // üî• ÎÇ¥ ÏúÑÏπò Í∞êÏßÄÌïòÏó¨ Í±¥Î¨ºÍ≥º Í≤πÏπòÎäîÏßÄ ÌôïÏù∏ ÌõÑ Ìà¨Î™ÖÎèÑ Î≥ÄÍ≤Ω
    private fun updateOverlayTransparency(currentLatLng: LatLng) {

        for ((key, value) in buildingOverlays) {
            val overlay = value.first
            val bounds = value.second

            if (bounds.contains(currentLatLng)) {
                Log.d("MAP_DEBUG", "ÌòÑÏû¨ ÏúÑÏπò ($currentLatLng) Í∞Ä $key ÎÇ¥Î∂ÄÏóê ÏûàÏùå! ‚Üí Ìà¨Î™ÖÎèÑ Ï°∞Ï†ï")
                overlay?.setTransparency(0.5f) // Î∞òÌà¨Î™Ö
            } else {
                Log.d("MAP_DEBUG", "ÌòÑÏû¨ ÏúÑÏπò ($currentLatLng) Í∞Ä $key Î∞ñÏóê ÏûàÏùå! ‚Üí ÏõêÎûòÎåÄÎ°ú")
                overlay?.setTransparency(0.0f) // Î∂àÌà¨Î™Ö
            }


        }
    }

    @SuppressLint("MissingPermission")
    private fun enableMyLocation() {
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), LOCATION_PERMISSION_REQUEST_CODE)
        } else {
            mMap.isMyLocationEnabled = true
            startLocationUpdates() // üî• ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë
        }
    }
    @SuppressLint("MissingPermission")
    private fun startLocationUpdates() {
        val locationRequest = LocationRequest.Builder(Priority.PRIORITY_HIGH_ACCURACY, 5000)
            .setMinUpdateIntervalMillis(2000)
            .build()

        locationCallback = object : LocationCallback() {
            override fun onLocationResult(locationResult: LocationResult) {
                for (location in locationResult.locations) {
                    val currentLatLng = LatLng(location.latitude, location.longitude)
                    Log.d("GPS_DEBUG", "ÌòÑÏû¨ ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏Îê®: $currentLatLng")

                    updateOverlayTransparency(currentLatLng) // ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ Ïãú Í±¥Î¨ºÍ≥º Í≤πÏπòÎäîÏßÄ ÌôïÏù∏
                    updateUserMarker(currentLatLng)
                }
            }
        }

        fusedLocationClient.requestLocationUpdates(locationRequest, locationCallback, null)
    }

    //üî• ÏÇ¨Ïö©Ïûê ÏúÑÏπò ÎßàÏª§ ÏóÖÎç∞Ïù¥Ìä∏
    private fun updateUserMarker(userLatLng: LatLng) {
        userMarker?.remove()
        userMarker = mMap.addMarker(
            MarkerOptions().position(userLatLng).title("ÎÇ¥ ÏúÑÏπò")
        )
    }
    private fun checkAndRequestPermissions() {
        val permissions = mutableListOf<String>()

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
            permissions.add(Manifest.permission.CAMERA)
        }

        if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.Q) { // Android 10 Ïù¥Ìïò
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                permissions.add(Manifest.permission.WRITE_EXTERNAL_STORAGE)
            }
        } else { // Android 13 Ïù¥ÏÉÅ (ÎØ∏ÎîîÏñ¥ ÏùΩÍ∏∞ Í∂åÌïú ÌïÑÏöî)
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_MEDIA_IMAGES) != PackageManager.PERMISSION_GRANTED) {
                permissions.add(Manifest.permission.READ_MEDIA_IMAGES)
            }
        }

        if (permissions.isNotEmpty()) {
            ActivityCompat.requestPermissions(this, permissions.toTypedArray(), CAMERA_PERMISSION_REQUEST_CODE)
        }
    }

    private fun checkPermissions() {
        val cameraPermission = ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
        val storagePermission = ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)

        val permissionsToRequest = mutableListOf<String>()

        if (cameraPermission != PackageManager.PERMISSION_GRANTED) {
            permissionsToRequest.add(Manifest.permission.CAMERA)
        }
        if (storagePermission != PackageManager.PERMISSION_GRANTED) {
            permissionsToRequest.add(Manifest.permission.WRITE_EXTERNAL_STORAGE)
        }

        if (permissionsToRequest.isNotEmpty()) {
            ActivityCompat.requestPermissions(this, permissionsToRequest.toTypedArray(), CAMERA_PERMISSION_REQUEST_CODE)
        }
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        when (requestCode) {
            LOCATION_PERMISSION_REQUEST_CODE -> {
                if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    enableMyLocation()
                }
            }
            CAMERA_PERMISSION_REQUEST_CODE -> {
                if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    Toast.makeText(this, "Ïπ¥Î©îÎùº Í∂åÌïú ÌóàÏö©Îê®", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(this, "Ïπ¥Î©îÎùº Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }
            }
            STORAGE_PERMISSION_REQUEST_CODE -> {
                if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    Toast.makeText(this, "Ï†ÄÏû•ÏÜå Ï†ëÍ∑º Í∂åÌïú ÌóàÏö©Îê®", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(this, "Ï†ÄÏû•ÏÜå Ï†ëÍ∑º Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    override fun onResume() {
        super.onResume()
        startLocationUpdates() // üî• Ïï±Ïù¥ Îã§Ïãú ÌôúÏÑ±ÌôîÎêòÎ©¥ ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë
    }

    override fun onPause() {
        super.onPause()
        fusedLocationClient.removeLocationUpdates(locationCallback) // üî• Ïï±Ïù¥ Î∞±Í∑∏ÎùºÏö¥ÎìúÎ°ú Í∞ÄÎ©¥ ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ Ï§ëÏßÄ
    }


    private fun showBuildingInfo(name: String, description: String) {
        Log.d("DEBUG", "Í±¥Î¨º ÌÅ¥Î¶≠Îê®: $name") // Î°úÍ∑∏ ÌôïÏù∏

        runOnUiThread {
            val buildingInfoTextView = findViewById<TextView>(R.id.building_info)
            buildingInfoTextView.text = "$name\n$description"
            buildingInfoTextView.visibility = View.VISIBLE // Í∞ïÏ†úÎ°ú UI ÏóÖÎç∞Ïù¥Ìä∏
            buildingInfoTextView.bringToFront()
        }
    }

    private val requestPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted: Boolean ->
        if (isGranted) {
            enableMyLocation()
        } else {
            // ÏÇ¨Ïö©ÏûêÍ∞Ä Í∂åÌïúÏùÑ Í±∞Î∂ÄÌñàÏùÑ Îïå Ï≤òÎ¶¨Ìï† Î°úÏßÅ Ï∂îÍ∞Ä
        }
    }
    // üî• ÌòÑÏû¨ ÏúÑÏπòÎ°ú Ïù¥ÎèôÌïòÎäî Í∏∞Îä• Ï∂îÍ∞Ä
    private fun moveToCurrentLocation() {
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
            fusedLocationClient.lastLocation.addOnSuccessListener { location: Location? ->
                location?.let {
                    val currentLatLng = LatLng(it.latitude, it.longitude)
                    mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(currentLatLng, 17f))
                }
            }
        } else {
            requestPermissionLauncher.launch(Manifest.permission.ACCESS_FINE_LOCATION)
        }
    }
    private fun openCamera() {
        Log.d("DEBUG_CAMERA", "Ïπ¥Î©îÎùº Ïã§Ìñâ ÏãúÎèÑ")  // Ïπ¥Î©îÎùº Ïã§Ìñâ Î°úÍ∑∏ Ï∂îÍ∞Ä

        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
        if (intent.resolveActivity(packageManager) == null) {
            Log.e("DEBUG_CAMERA", "Ïπ¥Î©îÎùº Ïï±ÏùÑ Ïã§ÌñâÌï† Ïàò ÏóÜÏùå!")
            return
        }

        val timeStamp = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(Date())
        val storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES)
        if (storageDir == null) {
            Log.e("DEBUG_CAMERA", "Ïä§ÌÜ†Î¶¨ÏßÄ ÎîîÎ†âÌÜ†Î¶¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå")
            return
        }

        photoFile = File(storageDir, "KNU_$timeStamp.jpg")

        val photoUri = FileProvider.getUriForFile(
            this,
            "com.example.knumap.fileprovider",
            photoFile
        )

        intent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri)

        try {
            startActivityForResult(intent, REQUEST_IMAGE_CAPTURE)
            Log.d("DEBUG_CAMERA", "Ïπ¥Î©îÎùº Ïã§Ìñâ ÏÑ±Í≥µ")
        } catch (e: Exception) {
            Log.e("DEBUG_CAMERA", "Ïπ¥Î©îÎùº Ïã§Ìñâ Ï§ë Ïò§Î•ò Î∞úÏÉù: ${e.message}")
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        Log.d("DEBUG_POST", "ÎÑòÏñ¥Í¥∏ÏôîÎãà?: ${requestCode}, ${resultCode}")
        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {

            // üî• Ïó¨Í∏∞ÏÑú PostWriteActivityÎ°ú Ï†ÑÌôò
            val photoUri = FileProvider.getUriForFile(
                this,
                "com.example.knumap.fileprovider",
                photoFile
            )

            val intent = Intent(this, PostWriteActivity::class.java).apply {
                putExtra("imageUri", photoUri.toString()) // stringÏúºÎ°ú Î≥ÄÌôòÌï¥ Ï†ÑÎã¨
            }
            startActivityForResult(intent, REQUEST_WRITE_POST)


        }
        if (requestCode == REQUEST_WRITE_POST && resultCode == RESULT_OK) {
            val newPost = data?.getParcelableExtra<Post>("newPost")
            if (newPost != null) {
                photoAdapter.addPhoto(newPost) // üî• RecyclerViewÏóê Ï∂îÍ∞Ä
                addMarkerOnMap(newPost.imageUri) // üî• ÏßÄÎèÑÏóê ÎßàÏª§ Ï∂îÍ∞Ä
            }
        }
        if (requestCode == REQUEST_VIEW_POST && resultCode == RESULT_OK) {
            val updatedPost = data?.getParcelableExtra<Post>("updatedPost")
            updatedPost?.let {
                Log.d("DEBUG_POST", "ÏóÖÎç∞Ïù¥Ìä∏Îêú post Î∞õÏùå: $it")
                updatePhotoLikeState(it)
            }
        }

    }
    private fun updatePhotoLikeState(updatedPost: Post) {
        Log.d("DEBUG_POST", "ÏóÖÎç∞Ïù¥Ìä∏ ÏöîÏ≤≠ Î∞õÏùÄ post: ${updatedPost.imageUri}, likes=${updatedPost.likes}, isLiked=${updatedPost.isLiked}")

        val photoList = photoAdapter.getPhotoList() // photoList Ï†ëÍ∑º Í∞ÄÎä•Ìïú Î∞©ÏãùÏù¥Ïñ¥Ïïº Ìï®
        Log.d("DEBUG_POST", "ÌòÑÏû¨ photoList ÌÅ¨Í∏∞: ${photoList.size}")

        val index = photoList.indexOfFirst {
            Log.d("DEBUG_POST", "Í≤ÄÏÇ¨ Ï§ë: ${it.uri} == ${updatedPost.imageUri}")
            it.uri == updatedPost.imageUri
        }

        if (index != -1) {
            val photo = photoList[index]
            Log.d("DEBUG_POST", "ÏùºÏπòÌïòÎäî ÏÇ¨ÏßÑ Ï∞æÏùå. Í∏∞Ï°¥ Ï¢ãÏïÑÏöî: ${photo.likes}, isLiked=${photo.isLiked}")

            photo.likes = updatedPost.likes
            photo.isLiked = updatedPost.isLiked
            photoAdapter.notifyItemChanged(index)

            Log.d("DEBUG_POST", "ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å at index $index: ÏÉà Ï¢ãÏïÑÏöî ${photo.likes}, isLiked=${photo.isLiked}")
        } else {
            Log.w("DEBUG_POST", "‚ö†Ô∏è Photo Î¶¨Ïä§Ìä∏ÏóêÏÑú ÏùºÏπòÌïòÎäî Í≤åÏãúÎ¨º Î™ª Ï∞æÏùå - ${updatedPost.imageUri}")
        }
    }


    private fun addMarkerOnMap(photoUri: Uri) {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
            // ‚úÖ ÏúÑÏπò Í∂åÌïúÏù¥ ÏûàÏùÑ Í≤ΩÏö∞ ÌòÑÏû¨ ÏúÑÏπò Í∞ÄÏ†∏Ïò§Í∏∞
            fusedLocationClient.lastLocation.addOnSuccessListener { location ->
                if (location != null) {
                    val latLng = LatLng(location.latitude, location.longitude)
                    mMap.addMarker(
                        MarkerOptions()
                            .position(latLng)
                            .title("Ï∞çÏùÄ ÏÇ¨ÏßÑ")
                            .icon(BitmapDescriptorFactory.fromBitmap(getBitmapFromUri(photoUri)))
                    )
                } else {
                    Toast.makeText(this, "ÌòÑÏû¨ ÏúÑÏπòÎ•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }
            }
        } else {
            // ‚ùå ÏúÑÏπò Í∂åÌïúÏù¥ ÏóÜÏúºÎ©¥ ÏöîÏ≤≠
            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), LOCATION_PERMISSION_REQUEST_CODE)
        }
    }
    private fun getBitmapFromUri(uri: Uri): Bitmap {
        //return MediaStore.Images.Media.getBitmap(contentResolver, uri)

        val originalBitmap = MediaStore.Images.Media.getBitmap(contentResolver, uri)

        // ‚úÖ ÎßàÏª§ ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å ÎπÑÌä∏Îßµ ÌÅ¨Í∏∞ Ï°∞Ï†ï (100x100 ÌîΩÏÖÄ)
        val scaledBitmap = Bitmap.createScaledBitmap(originalBitmap, 100, 100, false)

        return scaledBitmap

    }

    // üî• ÎÇ¥Î∂Ä Ï†ÄÏû•ÏÜåÏóê Ï¥¨ÏòÅÌïú ÏÇ¨ÏßÑ Ï†ÄÏû•ÌïòÎäî Ìï®Ïàò
    private fun saveImageToInternalStorage(bitmap: Bitmap): String {
        val timeStamp = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(Date())
        val storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES)
        val imageFile = File(storageDir, "KNU_$timeStamp.jpg")

        try {
            FileOutputStream(imageFile).use { out ->
                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, out)
            }
            return imageFile.absolutePath
        } catch (e: IOException) {
            Log.e("Camera", "ÏÇ¨ÏßÑ Ï†ÄÏû• Ïã§Ìå®: ${e.message}")
            return ""
        }
    }



}